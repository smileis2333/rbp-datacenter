<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.regent.rbp.api.dao.base.BaseDbDao">


    <select id="selectTableDataByMap" resultType="java.util.Map">
        SELECT *
        FROM `${tableName}`
        WHERE 1 = 1
        <foreach collection="conditionMap.entrySet()" index="key" item="value">
            and `${key}`=#{value}
        </foreach>
    </select>

    <insert id="insertMap">
        INSERT INTO `${tableName}`
        <foreach collection="map.entrySet()" index="key" item="value" open="(" close=")" separator=",">
            `${key}`
        </foreach>
        VALUES
        <foreach collection="map.entrySet()" index="key" item="value" open="(" close=")" separator=",">
            #{value}
        </foreach>
    </insert>

    <update id="updateMapById">
        UPDATE `${tableName}` SET
        <foreach collection="map.entrySet()" index="key" item="value">
            `${key}`= #{value}
        </foreach>
        WHERE `id` = #{id}
    </update>

    <select id="getLongDataBySql" resultType="java.lang.Long">
        ${sql}
    </select>

    <select id="getLongListDataBySql" resultType="java.lang.Long">
        ${sql}
    </select>

    <select id="getIntegerDataBySql" resultType="java.lang.Integer">
        ${sql}
    </select>

    <select id="getStringDataBySql" resultType="java.lang.String">
        ${sql}
    </select>

    <select id="getStringListDataBySql" resultType="java.lang.String">
        ${sql}
    </select>

    <insert id="insertSql" parameterType="java.lang.String">
        ${sql}
    </insert>

    <delete id="deleteSql" parameterType="java.lang.String">
        ${sql}
    </delete>

    <insert id="updateSql" parameterType="java.lang.String">
        ${sql}
    </insert>

    <select id="isExistField" resultType="java.lang.Integer">
        select count(*) from information_schema.columns where `table_schema` =database() and `table_name` = #{tableName} and `column_name` = #{fieldName}
    </select>

    <select id="isExistColumnName" resultType="java.lang.Integer">
        select count(*) from information_schema.columns co inner join
                             rbp_customize_column rcc on rcc.code = co.COLUMN_NAME
        where
              `table_schema` =database() and `table_name` = #{tableName}
                and rcc.name = #{columnName}
    </select>

    <select id="isExistTable" resultType="java.lang.Integer">
        select count(*) from information_schema.tables where `table_schema`= database() and `table_name`=  #{tableName};
    </select>

    <select id="isExist" resultType="java.lang.Boolean">
        ${checkSql}
    </select>

    <select id="getOneModuleBusinessType" resultType="com.regent.rbp.api.core.base.ModuleBusinessType">
         SELECT a.id, a.module_id, a.business_type_id FROM rbp_module_business_type a
            INNER JOIN rbp_module rm ON rm.status = 100 AND rm.base_module_id = #{baseModuleId} AND rm.id = a.module_id
            WHERE
                 EXISTS(SELECT 1 FROM rbp_business_type rby WHERE rby.base_business_type_id = #{baseBusinessTypeId} AND rby.id = a.business_type_id)
            LIMIT 1;
    </select>

    <select id="getListMap" parameterType="java.lang.String" resultType="java.util.Map">
        ${sql}
    </select>

    <select id="getSizeNameList" resultType="com.regent.rbp.api.core.base.SizeDetail">
        select a.id, a.size_class_id, a.name, a.field_name, b.id as goodsId from rbp_size_detail a
        inner join rbp_goods b on b.id in(
        <foreach item="id" collection="goodsIdList" open="" separator="," close="">
            #{id}
        </foreach>
        ) and b.size_class_id = a.size_class_id
        where a.name in (
        <foreach item="id" collection="sizeNameList" open="" separator="," close="">
            #{id}
        </foreach>
        )
    </select>

    <delete id="dropTemplateTable">
       drop table if exists ${tableName}
    </delete>

    <select id="queryCustomDataById" resultType="java.util.Map">
       select *
       from ${tableName}  where id = ${id}
    </select>

</mapper>